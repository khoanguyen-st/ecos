// <auto-generated />
using System;
using KAS.Entity.DB.ECOS.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KAS.ECOS.API.Migrations
{
    [DbContext(typeof(ECOSContext))]
    partial class ECOSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.AccessHistoryList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("AccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAdress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserDeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndUserId");

                    b.HasIndex("UserDeviceId");

                    b.ToTable("AccessHistoryLists");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.ApplicationFunctionList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FunctionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationFunctionLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ApplicationId = "1",
                            FunctionDescription = "desc",
                            FunctionName = "CREATE",
                            Level = (short)0,
                            Path = "Path"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.ApplicationFunctionPermissionList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationFunctionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxRecords")
                        .HasColumnType("integer");

                    b.Property<short>("Permission")
                        .HasColumnType("smallint");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFunctionId");

                    b.ToTable("ApplicationFunctionPermissionLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ApplicationFunctionId = "1",
                            MaxRecords = 10,
                            Permission = (short)4,
                            PermissionName = "CREATE"
                        },
                        new
                        {
                            Id = "2",
                            ApplicationFunctionId = "1",
                            MaxRecords = 10,
                            Permission = (short)4,
                            PermissionName = "CREATE"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.ApplicationList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ApplicationDescription = "desc",
                            ApplicationName = "ECOS"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.EndUserCredentialHistoryList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndUserId");

                    b.ToTable("EndUserCredentialHistoryLists");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.EndUserList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EndUserLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(240),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khoanguyen@gmail.com",
                            FirstName = "Khoa",
                            IsActive = true,
                            LastName = "Nguyen",
                            Password = "123123",
                            PhoneNumber = "0763602013",
                            Username = "khoanguyen"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.EndUserRoleList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrganizationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserDeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserDeviceId");

                    b.ToTable("EndUserRoleLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(392),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrganizationUserId = "1",
                            RoleId = "1",
                            UserDeviceId = "1"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.EndUserTokenList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndUserId");

                    b.ToTable("EndUserTokenLists");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationDatabaseList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationProfileId");

                    b.ToTable("OrganizationDatabaseLists");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationDeviceList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserDeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserDeviceId");

                    b.ToTable("OrganizationDeviceLists");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerCodeSmac")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HandPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationDescription")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrganizationLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Address = "116 Mai Thuc Lan",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(364),
                            CustomerCodeSmac = "123123",
                            Email = "kas@gmail.com",
                            HandPhone = "0123456677",
                            IsActive = true,
                            OrganizationName = "Kas"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationProfileList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationProfileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationProfileLists");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationUserList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationListId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndUserId");

                    b.HasIndex("OrganizationListId");

                    b.ToTable("OrganizationUserLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(350),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndUserId = "1",
                            IsActive = true,
                            OrganizationId = "1"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.RoleApplicationFunctionPermissionList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationFunctionPermissionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFunctionPermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleApplicationFunctionPermissionLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ApplicationFunctionPermissionId = "1",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(488),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "1"
                        },
                        new
                        {
                            Id = "2",
                            ApplicationFunctionPermissionId = "1",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(489),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "1"
                        },
                        new
                        {
                            Id = "3",
                            ApplicationFunctionPermissionId = "1",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(490),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "1"
                        },
                        new
                        {
                            Id = "4",
                            ApplicationFunctionPermissionId = "2",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(491),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.RoleList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RoleLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(439),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            OrganizationId = "1",
                            RoleDescription = "Desc",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            CreatedDate = new DateTime(2022, 12, 13, 15, 48, 11, 225, DateTimeKind.Local).AddTicks(442),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            OrganizationId = "1",
                            RoleDescription = "Employee",
                            RoleName = "Employee"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.UserDeviceList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LatestAccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatestIPAccess")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LatestLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OSName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OSVer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserDeviceLists");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceName = "POS",
                            IsAcive = true,
                            LatestAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LatestIPAccess = "12.0.0.1",
                            LatestLocation = "Danang",
                            OSName = "Windows",
                            OSVer = "10"
                        });
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.AccessHistoryList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.EndUserList", "EndUser")
                        .WithMany("AccessHitories")
                        .HasForeignKey("EndUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAS.Entity.DB.ECOS.Entities.UserDeviceList", "UserDevice")
                        .WithMany("AccessHistories")
                        .HasForeignKey("UserDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndUser");

                    b.Navigation("UserDevice");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.ApplicationFunctionList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.ApplicationList", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.ApplicationFunctionPermissionList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.ApplicationFunctionList", "ApplicationFunction")
                        .WithMany("ApplicationPermissions")
                        .HasForeignKey("ApplicationFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationFunction");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.EndUserCredentialHistoryList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.EndUserList", "EndUser")
                        .WithMany("EndUserCredentialHistories")
                        .HasForeignKey("EndUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndUser");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.EndUserRoleList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.OrganizationUserList", "OrganizationUser")
                        .WithMany()
                        .HasForeignKey("OrganizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAS.Entity.DB.ECOS.Entities.RoleList", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAS.Entity.DB.ECOS.Entities.UserDeviceList", "UserDevice")
                        .WithMany("EndUserRoles")
                        .HasForeignKey("UserDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationUser");

                    b.Navigation("Role");

                    b.Navigation("UserDevice");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.EndUserTokenList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.EndUserList", "EndUser")
                        .WithMany("EndUserTokens")
                        .HasForeignKey("EndUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndUser");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationDatabaseList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.OrganizationProfileList", "OrganizationProfile")
                        .WithMany("OrganizationDatabaseLists")
                        .HasForeignKey("OrganizationProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationProfile");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationDeviceList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.OrganizationList", "Organization")
                        .WithMany("OrganizationDeviceLists")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAS.Entity.DB.ECOS.Entities.UserDeviceList", "UserDevice")
                        .WithMany("OrganizationDevices")
                        .HasForeignKey("UserDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("UserDevice");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationProfileList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.OrganizationList", "Organization")
                        .WithMany("OrganizationProfileLists")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationUserList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.EndUserList", "EndUser")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("EndUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAS.Entity.DB.ECOS.Entities.OrganizationList", null)
                        .WithMany("OrganizationUserLists")
                        .HasForeignKey("OrganizationListId");

                    b.Navigation("EndUser");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.RoleApplicationFunctionPermissionList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.ApplicationFunctionPermissionList", "ApplicationFunctionPermission")
                        .WithMany()
                        .HasForeignKey("ApplicationFunctionPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAS.Entity.DB.ECOS.Entities.RoleList", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationFunctionPermission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.RoleList", b =>
                {
                    b.HasOne("KAS.Entity.DB.ECOS.Entities.OrganizationList", "Organization")
                        .WithMany("RoleLists")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.ApplicationFunctionList", b =>
                {
                    b.Navigation("ApplicationPermissions");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.EndUserList", b =>
                {
                    b.Navigation("AccessHitories");

                    b.Navigation("EndUserCredentialHistories");

                    b.Navigation("EndUserTokens");

                    b.Navigation("OrganizationUsers");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationList", b =>
                {
                    b.Navigation("OrganizationDeviceLists");

                    b.Navigation("OrganizationProfileLists");

                    b.Navigation("OrganizationUserLists");

                    b.Navigation("RoleLists");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.OrganizationProfileList", b =>
                {
                    b.Navigation("OrganizationDatabaseLists");
                });

            modelBuilder.Entity("KAS.Entity.DB.ECOS.Entities.UserDeviceList", b =>
                {
                    b.Navigation("AccessHistories");

                    b.Navigation("EndUserRoles");

                    b.Navigation("OrganizationDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
